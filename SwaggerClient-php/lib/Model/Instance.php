<?php
/**
 * Instance
 *
 * PHP version 5
 *
 * @category Class
 * @package  Wodby\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Wodby API Client
 *
 * Wodby Developer Documentation https://wodby.com/docs/dev
 *
 * OpenAPI spec version: 3.0.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Wodby\Api\Model;

use \ArrayAccess;
use \Wodby\Api\ObjectSerializer;

/**
 * Instance Class Doc Comment
 *
 * @category Class
 * @package  Wodby\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Instance implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Instance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'app_id' => 'string',
        'created' => 'int',
        'git_repo_id' => 'string',
        'git_repo_target' => 'string',
        'has_new_version' => 'bool',
        'id' => 'string',
        'last_deploy' => 'int',
        'name' => 'string',
        'org_id' => 'string',
        'server_id' => 'string',
        'stack_id' => 'string',
        'stack_rev_number' => 'int',
        'status' => 'string',
        'title' => 'string',
        'type' => '\Wodby\Api\Model\InstanceType',
        'updated' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'app_id' => null,
        'created' => null,
        'git_repo_id' => null,
        'git_repo_target' => null,
        'has_new_version' => null,
        'id' => null,
        'last_deploy' => null,
        'name' => null,
        'org_id' => null,
        'server_id' => null,
        'stack_id' => null,
        'stack_rev_number' => null,
        'status' => null,
        'title' => null,
        'type' => null,
        'updated' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'app_id' => 'app_id',
        'created' => 'created',
        'git_repo_id' => 'git_repo_id',
        'git_repo_target' => 'git_repo_target',
        'has_new_version' => 'has_new_version',
        'id' => 'id',
        'last_deploy' => 'last_deploy',
        'name' => 'name',
        'org_id' => 'org_id',
        'server_id' => 'server_id',
        'stack_id' => 'stack_id',
        'stack_rev_number' => 'stack_rev_number',
        'status' => 'status',
        'title' => 'title',
        'type' => 'type',
        'updated' => 'updated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'app_id' => 'setAppId',
        'created' => 'setCreated',
        'git_repo_id' => 'setGitRepoId',
        'git_repo_target' => 'setGitRepoTarget',
        'has_new_version' => 'setHasNewVersion',
        'id' => 'setId',
        'last_deploy' => 'setLastDeploy',
        'name' => 'setName',
        'org_id' => 'setOrgId',
        'server_id' => 'setServerId',
        'stack_id' => 'setStackId',
        'stack_rev_number' => 'setStackRevNumber',
        'status' => 'setStatus',
        'title' => 'setTitle',
        'type' => 'setType',
        'updated' => 'setUpdated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'app_id' => 'getAppId',
        'created' => 'getCreated',
        'git_repo_id' => 'getGitRepoId',
        'git_repo_target' => 'getGitRepoTarget',
        'has_new_version' => 'getHasNewVersion',
        'id' => 'getId',
        'last_deploy' => 'getLastDeploy',
        'name' => 'getName',
        'org_id' => 'getOrgId',
        'server_id' => 'getServerId',
        'stack_id' => 'getStackId',
        'stack_rev_number' => 'getStackRevNumber',
        'status' => 'getStatus',
        'title' => 'getTitle',
        'type' => 'getType',
        'updated' => 'getUpdated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_OK = 'ok';
    const STATUS_UNREACHABLE = 'unreachable';
    const STATUS_ERROR = 'error';
    const STATUS_CREATING = 'creating';
    const STATUS_UPDATING = 'updating';
    const STATUS_DELETING = 'deleting';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_OK,
            self::STATUS_UNREACHABLE,
            self::STATUS_ERROR,
            self::STATUS_CREATING,
            self::STATUS_UPDATING,
            self::STATUS_DELETING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['app_id'] = isset($data['app_id']) ? $data['app_id'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['git_repo_id'] = isset($data['git_repo_id']) ? $data['git_repo_id'] : null;
        $this->container['git_repo_target'] = isset($data['git_repo_target']) ? $data['git_repo_target'] : null;
        $this->container['has_new_version'] = isset($data['has_new_version']) ? $data['has_new_version'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_deploy'] = isset($data['last_deploy']) ? $data['last_deploy'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['org_id'] = isset($data['org_id']) ? $data['org_id'] : null;
        $this->container['server_id'] = isset($data['server_id']) ? $data['server_id'] : null;
        $this->container['stack_id'] = isset($data['stack_id']) ? $data['stack_id'] : null;
        $this->container['stack_rev_number'] = isset($data['stack_rev_number']) ? $data['stack_rev_number'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['app_id'] === null) {
            $invalidProperties[] = "'app_id' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['last_deploy'] === null) {
            $invalidProperties[] = "'last_deploy' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['org_id'] === null) {
            $invalidProperties[] = "'org_id' can't be null";
        }
        if ($this->container['server_id'] === null) {
            $invalidProperties[] = "'server_id' can't be null";
        }
        if ($this->container['stack_id'] === null) {
            $invalidProperties[] = "'stack_id' can't be null";
        }
        if ($this->container['stack_rev_number'] === null) {
            $invalidProperties[] = "'stack_rev_number' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['updated'] === null) {
            $invalidProperties[] = "'updated' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['app_id'] === null) {
            return false;
        }
        if ($this->container['created'] === null) {
            return false;
        }
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['last_deploy'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['org_id'] === null) {
            return false;
        }
        if ($this->container['server_id'] === null) {
            return false;
        }
        if ($this->container['stack_id'] === null) {
            return false;
        }
        if ($this->container['stack_rev_number'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowedValues)) {
            return false;
        }
        if ($this->container['title'] === null) {
            return false;
        }
        if ($this->container['updated'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets app_id
     *
     * @return string
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     *
     * @param string $app_id app_id
     *
     * @return $this
     */
    public function setAppId($app_id)
    {
        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return int
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param int $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets git_repo_id
     *
     * @return string
     */
    public function getGitRepoId()
    {
        return $this->container['git_repo_id'];
    }

    /**
     * Sets git_repo_id
     *
     * @param string $git_repo_id git_repo_id
     *
     * @return $this
     */
    public function setGitRepoId($git_repo_id)
    {
        $this->container['git_repo_id'] = $git_repo_id;

        return $this;
    }

    /**
     * Gets git_repo_target
     *
     * @return string
     */
    public function getGitRepoTarget()
    {
        return $this->container['git_repo_target'];
    }

    /**
     * Sets git_repo_target
     *
     * @param string $git_repo_target git_repo_target
     *
     * @return $this
     */
    public function setGitRepoTarget($git_repo_target)
    {
        $this->container['git_repo_target'] = $git_repo_target;

        return $this;
    }

    /**
     * Gets has_new_version
     *
     * @return bool
     */
    public function getHasNewVersion()
    {
        return $this->container['has_new_version'];
    }

    /**
     * Sets has_new_version
     *
     * @param bool $has_new_version has_new_version
     *
     * @return $this
     */
    public function setHasNewVersion($has_new_version)
    {
        $this->container['has_new_version'] = $has_new_version;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_deploy
     *
     * @return int
     */
    public function getLastDeploy()
    {
        return $this->container['last_deploy'];
    }

    /**
     * Sets last_deploy
     *
     * @param int $last_deploy last_deploy
     *
     * @return $this
     */
    public function setLastDeploy($last_deploy)
    {
        $this->container['last_deploy'] = $last_deploy;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets org_id
     *
     * @return string
     */
    public function getOrgId()
    {
        return $this->container['org_id'];
    }

    /**
     * Sets org_id
     *
     * @param string $org_id org_id
     *
     * @return $this
     */
    public function setOrgId($org_id)
    {
        $this->container['org_id'] = $org_id;

        return $this;
    }

    /**
     * Gets server_id
     *
     * @return string
     */
    public function getServerId()
    {
        return $this->container['server_id'];
    }

    /**
     * Sets server_id
     *
     * @param string $server_id server_id
     *
     * @return $this
     */
    public function setServerId($server_id)
    {
        $this->container['server_id'] = $server_id;

        return $this;
    }

    /**
     * Gets stack_id
     *
     * @return string
     */
    public function getStackId()
    {
        return $this->container['stack_id'];
    }

    /**
     * Sets stack_id
     *
     * @param string $stack_id stack_id
     *
     * @return $this
     */
    public function setStackId($stack_id)
    {
        $this->container['stack_id'] = $stack_id;

        return $this;
    }

    /**
     * Gets stack_rev_number
     *
     * @return int
     */
    public function getStackRevNumber()
    {
        return $this->container['stack_rev_number'];
    }

    /**
     * Sets stack_rev_number
     *
     * @param int $stack_rev_number stack_rev_number
     *
     * @return $this
     */
    public function setStackRevNumber($stack_rev_number)
    {
        $this->container['stack_rev_number'] = $stack_rev_number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Wodby\Api\Model\InstanceType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Wodby\Api\Model\InstanceType $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return int
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param int $updated updated
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


